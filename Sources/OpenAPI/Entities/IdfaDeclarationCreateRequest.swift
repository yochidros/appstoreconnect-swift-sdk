// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation

@available(*, deprecated, message: "Deprecated")
public struct IdfaDeclarationCreateRequest: Codable {
	public var data: Data

	public struct Data: Codable {
		public var type: `Type`
		public var attributes: Attributes
		public var relationships: Relationships

		public enum `Type`: String, Codable, CaseIterable {
			case idfaDeclarations
		}

		public struct Attributes: Codable {
			public var isServesAds: Bool
			public var isAttributesAppInstallationToPreviousAd: Bool
			public var isAttributesActionWithPreviousAd: Bool
			public var isHonorsLimitedAdTracking: Bool

			public init(isServesAds: Bool, isAttributesAppInstallationToPreviousAd: Bool, isAttributesActionWithPreviousAd: Bool, isHonorsLimitedAdTracking: Bool) {
				self.isServesAds = isServesAds
				self.isAttributesAppInstallationToPreviousAd = isAttributesAppInstallationToPreviousAd
				self.isAttributesActionWithPreviousAd = isAttributesActionWithPreviousAd
				self.isHonorsLimitedAdTracking = isHonorsLimitedAdTracking
			}

			private enum CodingKeys: String, CodingKey {
				case isServesAds = "servesAds"
				case isAttributesAppInstallationToPreviousAd = "attributesAppInstallationToPreviousAd"
				case isAttributesActionWithPreviousAd = "attributesActionWithPreviousAd"
				case isHonorsLimitedAdTracking = "honorsLimitedAdTracking"
			}
		}

		public struct Relationships: Codable {
			public var appStoreVersion: AppStoreVersion

			public struct AppStoreVersion: Codable {
				public var data: Data

				public struct Data: Codable {
					public var type: `Type`
					public var id: String

					public enum `Type`: String, Codable, CaseIterable {
						case appStoreVersions
					}

					public init(type: `Type`, id: String) {
						self.type = type
						self.id = id
					}
				}

				public init(data: Data) {
					self.data = data
				}
			}

			public init(appStoreVersion: AppStoreVersion) {
				self.appStoreVersion = appStoreVersion
			}
		}

		public init(type: `Type`, attributes: Attributes, relationships: Relationships) {
			self.type = type
			self.attributes = attributes
			self.relationships = relationships
		}
	}

	public init(data: Data) {
		self.data = data
	}
}
