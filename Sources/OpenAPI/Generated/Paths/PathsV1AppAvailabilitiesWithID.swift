// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import URLQueryEncoder

extension APIEndpoint.V1.AppAvailabilities {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/appAvailabilities/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppAvailabilityResponse> {
			.get(path, query: parameters?.asQuery)
		}

		public struct GetParameters {
			public var fieldsAppAvailabilities: [FieldsAppAvailabilities]?
			public var include: [Include]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var limitAvailableTerritories: Int?

			public enum FieldsAppAvailabilities: String, Codable, CaseIterable {
				case app
				case availableInNewTerritories
				case availableTerritories
			}

			public enum Include: String, Codable, CaseIterable {
				case app
				case availableTerritories
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public init(fieldsAppAvailabilities: [FieldsAppAvailabilities]? = nil, include: [Include]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, limitAvailableTerritories: Int? = nil) {
				self.fieldsAppAvailabilities = fieldsAppAvailabilities
				self.include = include
				self.fieldsTerritories = fieldsTerritories
				self.limitAvailableTerritories = limitAvailableTerritories
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsAppAvailabilities, forKey: "fields[appAvailabilities]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(limitAvailableTerritories, forKey: "limit[availableTerritories]")
				return encoder.items
			}
		}
	}
}
